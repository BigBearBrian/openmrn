#include "utils/test_main.hxx"
#include "utils/Debouncer.hxx"

namespace
{

TEST(QuiesceDebouncerTest, InitState0)
{
    QuiesceDebouncer d(3);
    d.initialize(false);
    EXPECT_FALSE(d.current_state());
    EXPECT_FALSE(d.current_state());
    EXPECT_FALSE(d.current_state());
}

TEST(QuiesceDebouncerTest, InitState1)
{
    QuiesceDebouncer d(3);
    d.initialize(true);
    EXPECT_TRUE(d.current_state());
}

TEST(QuiesceDebouncerTest, Switch10AndSame)
{
    QuiesceDebouncer d(3);
    d.initialize(true);
    EXPECT_TRUE(d.current_state());
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_TRUE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(false));
}

TEST(QuiesceDebouncerTest, Switch01AndSame)
{
    QuiesceDebouncer d(3);
    d.initialize(false);
    EXPECT_FALSE(d.current_state());
    EXPECT_FALSE(d.update_state(true));
    EXPECT_FALSE(d.current_state());
    EXPECT_FALSE(d.update_state(true));
    EXPECT_FALSE(d.current_state());
    EXPECT_TRUE(d.update_state(true));
    EXPECT_TRUE(d.current_state());
    EXPECT_FALSE(d.update_state(true));
    EXPECT_TRUE(d.current_state());
    EXPECT_FALSE(d.update_state(true));
    EXPECT_TRUE(d.current_state());
    EXPECT_FALSE(d.update_state(true));
    EXPECT_TRUE(d.current_state());
    EXPECT_FALSE(d.update_state(true));
    EXPECT_FALSE(d.update_state(true));
    EXPECT_FALSE(d.update_state(true));
}

TEST(CountingDebouncer, SimpleTest)
{
    CountingDebouncer::Options opts;
    opts.window_size = 5;
    opts.min_count = 3;
    CountingDebouncer d(opts);
    d.initialize(false);
    EXPECT_FALSE(d.current_state());
    for (int i = 0; i < 100; ++i) {
        EXPECT_FALSE(d.update_state(false));
    }
    EXPECT_FALSE(d.update_state(true));
    EXPECT_FALSE(d.update_state(false));
    EXPECT_FALSE(d.update_state(true));

    EXPECT_FALSE(d.current_state());

    EXPECT_TRUE(d.update_state(true));  // got the third bit
    EXPECT_TRUE(d.current_state());

    // Now we shift out the highest bit -- it takes two.
    EXPECT_FALSE(d.update_state(false));
    EXPECT_TRUE(d.current_state());

    EXPECT_TRUE(d.update_state(false));
    EXPECT_FALSE(d.current_state());

    // Now we add another bit.
    EXPECT_TRUE(d.update_state(true));
    EXPECT_TRUE(d.current_state());
}

TEST(ToggleDebouncerTest, StartFalseAndToggleTwice)
{
    ToggleDebouncer<QuiesceDebouncer> d(2);
    d.initialize(false);
    EXPECT_FALSE(d.current_state());

    for (int k = 0; k < 10; ++k)
    {
        EXPECT_FALSE(d.current_state());

        EXPECT_FALSE(d.update_state(true));
        EXPECT_FALSE(d.current_state());
        // bit of bouncing here
        EXPECT_FALSE(d.update_state(false));
        EXPECT_FALSE(d.current_state());
        EXPECT_FALSE(d.update_state(true));
        EXPECT_FALSE(d.current_state());
        EXPECT_TRUE(d.update_state(true));
        EXPECT_TRUE(d.current_state());

        // While the button is pressed, we are still all true
        for (int i = 0; i < 10; ++i)
        {
            EXPECT_FALSE(d.update_state(true));
            EXPECT_TRUE(d.current_state());
        }

        // The button is released but state is still true
        for (int i = 0; i < 10; ++i)
        {
            EXPECT_FALSE(d.update_state(false));
            EXPECT_TRUE(d.current_state());
        }

        // Then we press again, and get a flip to false
        EXPECT_FALSE(d.update_state(true));
        EXPECT_TRUE(d.current_state());
        EXPECT_TRUE(d.update_state(true));
        EXPECT_FALSE(d.current_state());

        // While the button is pressed, we are still all false
        for (int i = 0; i < 10; ++i)
        {
            EXPECT_FALSE(d.update_state(true));
            EXPECT_FALSE(d.current_state());
        }

        // The button is released but state is still true
        for (int i = 0; i < 10; ++i)
        {
            EXPECT_FALSE(d.update_state(false));
            EXPECT_FALSE(d.current_state());
        }
    }
}

} // namespace
