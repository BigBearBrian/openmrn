/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file ConfigRepresentation.cxxtest
 *
 * Unittests for the representation of config files
 *
 * @author Balazs Racz
 * @date 31 May 2014
 */

#include "utils/test_main.hxx"

#include "nmranet/ConfigRepresentation.hxx"

namespace nmranet {
namespace {

BEGIN_GROUP(TestGroup, base);
EXTEND_GROUP(TestGroup, base, e1, Uint8ConfigEntry);
EXTEND_GROUP(TestGroup, e1, e2, Uint16ConfigEntry);
END_GROUP(TestGroup, e2);

BEGIN_GROUP(TestNodeConfig, base);
EXTEND_GROUP(TestNodeConfig, base, version, Uint8ConfigEntry);
EXTEND_GROUP(TestNodeConfig, version, test_short, Uint16ConfigEntry);
EXTEND_GROUP(TestNodeConfig, test_short, test64, Uint64ConfigEntry);
EXTEND_GROUP(TestNodeConfig, test64, test32, Uint32ConfigEntry);
using TestRepeat = RepeatedGroup<TestGroup, 3>;
EXTEND_GROUP(TestNodeConfig, test32, testgroup, TestRepeat);
EXTEND_GROUP(TestNodeConfig, testgroup, last, Uint8ConfigEntry);
END_GROUP(TestNodeConfig, last);

TEST(TestNodeConfig, LengthAndOffsetsAreCorrect) {
    EXPECT_EQ(25, TestNodeConfig::size());
    EXPECT_EQ(3, TestGroup::size());
    EXPECT_EQ(9, TestRepeat::size());
    TestNodeConfig cfg(11);
    EXPECT_EQ(4, sizeof(cfg));

    EXPECT_EQ(11, cfg.offset());

    EXPECT_EQ(11, cfg.version().offset());
    EXPECT_EQ(12, cfg.test_short().offset());
    EXPECT_EQ(14, cfg.test64().offset());
    EXPECT_EQ(22, cfg.test32().offset());

    EXPECT_EQ(26, cfg.testgroup().offset());

    EXPECT_EQ(26, cfg.testgroup().entry(0).offset());
    EXPECT_EQ(26, cfg.testgroup().entry(0).e1().offset());
    EXPECT_EQ(27, cfg.testgroup().entry(0).e2().offset());

    EXPECT_EQ(29, cfg.testgroup().entry(1).offset());

    EXPECT_EQ(29, cfg.testgroup().entry(1).e1().offset());
    EXPECT_EQ(33, cfg.testgroup().entry(2).e2().offset());

    EXPECT_EQ(35, cfg.last().offset());
}

} // namespace
} // namespace nmranet
