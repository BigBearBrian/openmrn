#include "gtest/gtest.h"
#include "utils/BufferQueue.hxx"

TEST(BufferTest, free_alloc_init_4)
{
    Buffer *buffer = mainBufferPool->buffer_alloc(4);
    EXPECT_TRUE(buffer != NULL);
    buffer->free();
    buffer = mainBufferPool->buffer_alloc(4);
    EXPECT_TRUE(buffer != NULL);    
}

TEST(BufferTest, free_alloc_init_8)
{
    Buffer *buffer = mainBufferPool->buffer_alloc(8);
    EXPECT_TRUE(buffer != NULL);
    buffer->free();
    buffer = mainBufferPool->buffer_alloc(8);
    EXPECT_TRUE(buffer != NULL);    
}

TEST(BufferTest, free_alloc_init_16)
{
    Buffer *buffer = mainBufferPool->buffer_alloc(16);
    EXPECT_TRUE(buffer != NULL);
    buffer->free();
    buffer = mainBufferPool->buffer_alloc(16);
    EXPECT_TRUE(buffer != NULL);    
}

TEST(BufferTest, free_alloc_init_32)
{
    Buffer *buffer = mainBufferPool->buffer_alloc(32);
    EXPECT_TRUE(buffer != NULL);
    buffer->free();
    buffer = mainBufferPool->buffer_alloc(32);
    EXPECT_TRUE(buffer != NULL);    
}

TEST(BufferTest, advance_size_available)
{
    Buffer *buffer = mainBufferPool->buffer_alloc(100);
    buffer->advance(10);
    EXPECT_TRUE(buffer->size() == 100);
    EXPECT_TRUE(buffer->available() == 90);
    EXPECT_TRUE((char*)buffer->start() + 10 == buffer->position());
}

TEST(BufferTest, expand)
{
    Buffer *buffer = mainBufferPool->buffer_alloc(100);
    buffer = buffer->expand(200);
    EXPECT_TRUE(buffer->size() == 200);
    EXPECT_TRUE(buffer->available() == 200);
    EXPECT_TRUE(buffer->start() == buffer->position());
}

TEST(BufferQueueTest, all)
{
    Buffer *buffer1 = mainBufferPool->buffer_alloc(100);
    Buffer *buffer2 = mainBufferPool->buffer_alloc(32);
    EXPECT_TRUE(buffer1 != NULL);
    EXPECT_TRUE(buffer2 != NULL);
    BufferQueue *queue = new BufferQueue();
    EXPECT_TRUE(queue != NULL);
    EXPECT_EQ(queue->pending(), (size_t)0);
    EXPECT_TRUE(queue->empty());
    EXPECT_TRUE(queue->next() == NULL);

    queue->insert(buffer1);
    EXPECT_EQ(queue->pending(), (size_t)1);
    EXPECT_FALSE(queue->empty());

    queue->insert(buffer2);
    EXPECT_EQ(queue->pending(), (size_t)2);
    EXPECT_FALSE(queue->empty());

    EXPECT_TRUE(queue->next() == buffer1);
    EXPECT_EQ(queue->pending(), (size_t)1);
    EXPECT_FALSE(queue->empty());

    EXPECT_TRUE(queue->next() == buffer2);
    EXPECT_EQ(queue->pending(), (size_t)0);
    EXPECT_TRUE(queue->empty());

    EXPECT_TRUE(queue->next() == NULL);
    
    queue->buffer_free(buffer1);
    queue->buffer_free(buffer2);
}

TEST(BufferQueueWaitTest, all)
{
    long long start, stop;

    Buffer *buffer1 = mainBufferPool->buffer_alloc(100);
    Buffer *buffer2 = mainBufferPool->buffer_alloc(32);
    Buffer *buffer3 = mainBufferPool->buffer_alloc(8);
    EXPECT_TRUE(buffer1 != NULL);
    EXPECT_TRUE(buffer2 != NULL);
    EXPECT_TRUE(buffer3 != NULL);
    BufferQueueWait *queue = new BufferQueueWait();
    EXPECT_TRUE(queue != NULL);
    EXPECT_EQ(queue->pending(), (size_t)0);
    EXPECT_TRUE(queue->empty());
    EXPECT_TRUE(queue->next() == NULL);

    queue->insert(buffer1);
    EXPECT_EQ(queue->pending(), (size_t)1);
    EXPECT_FALSE(queue->empty());

    queue->insert(buffer2);
    EXPECT_EQ(queue->pending(), (size_t)2);
    EXPECT_FALSE(queue->empty());

    queue->insert(buffer3);
    EXPECT_EQ(queue->pending(), (size_t)3);
    EXPECT_FALSE(queue->empty());

    EXPECT_TRUE(queue->next() == buffer1);
    EXPECT_EQ(queue->pending(), (size_t)2);
    EXPECT_FALSE(queue->empty());

    EXPECT_TRUE(queue->wait() == buffer2);
    EXPECT_EQ(queue->pending(), (size_t)1);
    EXPECT_FALSE(queue->empty());

    start = OSTime::get_monotonic();
    EXPECT_TRUE(queue->timedwait(OS_WAIT_FOREVER) == buffer3);
    EXPECT_EQ(queue->pending(), (size_t)0);
    EXPECT_TRUE(queue->empty());
    stop = OSTime::get_monotonic();
    EXPECT_TRUE((stop - start) < (long long)1000000);

    start = OSTime::get_monotonic();
    EXPECT_TRUE(queue->next() == NULL);
    EXPECT_TRUE(queue->timedwait(1000000000) == NULL);
    stop = OSTime::get_monotonic();
    EXPECT_TRUE((stop - start) > (long long)9999000000);
    EXPECT_TRUE((stop - start) < (long long)1001000000);
    
    queue->buffer_free(buffer1);
    queue->buffer_free(buffer2);
    queue->buffer_free(buffer3);
}

int appl_main(int argc, char* argv[])
{
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
