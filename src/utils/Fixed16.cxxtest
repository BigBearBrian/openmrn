/** \copyright
 * Copyright (c) 2016, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file Fixed16.cxxtest
 *
 * Unit tests for the fixed-point arithmetic type.
 *
 * @author Balazs Racz
 * @date 19 Dec 2016
 */

#include "utils/test_main.hxx"
#include "utils/Fixed16.hxx"

TEST(Fixed16Test, CreateRound) {
    Fixed16 v1(13);
    EXPECT_EQ(13, (uint16_t) v1);
    v1 = Fixed16(13, 0x7fff);
    EXPECT_EQ(13, (uint16_t) v1);

    v1 = Fixed16(13, 0x8000);
    EXPECT_EQ(14, (uint16_t) v1);

    v1 = Fixed16(13, 0xff00);
    EXPECT_EQ(14, (uint16_t) v1);

    v1 = Fixed16(13, 0xffff);
    EXPECT_EQ(14, (uint16_t) v1);
}

TEST(Fixed16Test, Arithmetics) {
    Fixed16 v1(13);
    EXPECT_EQ(13, (uint16_t) v1);

    v1 += 4;
    EXPECT_EQ(17, (uint16_t) v1);

    v1 -= 2;
    EXPECT_EQ(15, (uint16_t) v1);

    v1 += Fixed16(0, 0x8000);
    EXPECT_EQ(16, (uint16_t) v1);
    EXPECT_EQ(15, v1.trunc());

    v1 *= 2;
    EXPECT_EQ(31, (uint16_t) v1);
    EXPECT_EQ(31, v1.trunc());
    EXPECT_EQ(0, v1.frac());

    v1 /= 2;
    EXPECT_EQ(16, (uint16_t) v1);
    EXPECT_EQ(15, v1.trunc());
    EXPECT_EQ(0x8000, v1.frac());
    Fixed16 v3=v1;
    
    Fixed16 v2 = 1;
    v2 /= 2;
    v1 += v2;
    EXPECT_EQ(16, v1.trunc());
    EXPECT_EQ(0, v1.frac());

    v3 += Fixed16(1)/2;
    EXPECT_EQ(16, v3.trunc());
    EXPECT_EQ(0, v3.frac());
}
